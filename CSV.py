import csv
"""This file contains functions for reading and writing in a csv file. 
I HAD WAY TOO MANY ISSUES WITH DATABASES, there was a huge issue that sql didn't like 
double quoted strings, and needed single quotes but it was just too much trouble to deal with. 
I'm just going to make multiple csv files and maybe have some sort of trigger function where 
changes to a csv file will trigger it to migrate to a database of some kind."""

#this function creates a csv files and returns the name of teh file as output
#name is a string telling you the name of the csv
#attr is a list of strings that are going to be the first row where data can be written
def createCSV(name,attr):
    name=name+".csv"
    with open(name,'w') as csvfile:
        fw=csv.writer(csvfile,delimiter=',',quotechar='|',quoting=csv.QUOTE_MINIMAL)
        fw.writerow(attr)
        csvfile.close();

#function to write a csv file

'''Very similar to the write functions in the Database.py, the write function will take in a 
list of dictionaries attrs, and will then write to that csv file, and it takes in a csv file name 

Inputs: 
    Attrs is a list of n dictionaries. Let d be each dictionary inside this list where d is a 
    dictionary formatted like this {column-name1:data, column-name2:data,....column-namen:data} 
        Ex. {id:1,name:'bulbasaur',types:'grass,poison',....} 
    fileName is a string that contains the name of the csv file. 

Logic: 
    Open the csv file
    Loop through Attrs and called the writerow() function on every d dictionary, writing their 
    values as a list. 

Output: 
    return True if completed; 
    If any errors, return False and print the error as well as the line number associated. 

 '''
def write(fileName, attrs):
    try:
        with open(fileName,"w") as file:
            fw=csv.writer(file,delimiter=",", quotechar="|", quoting=csv.QUOTE_MINIMAL);
            #its 1 to skip the first row;
            for i in range(1,len(attrs)):
                d=attrs[i];
                fw.writerow(d.values());
    except Exception as e:
        print("line 46");
        print(e);
        return False
    return True;

#function to read a csv file
'''
There will be ONE function to read a csv file 
Essentially it will return a list of dictionaries where each dictionary d, its keys are 
the names of the columns and its values are the values of each row of those columns

Inputs: 
    fileName is a string of a csv that will be read 
    i is an optional argument that is between 1 and n for a csv n rows, by default i is set to -1, 
    this will indicate if a specific row needs to be called upon. 
    
Logic: 
    If i is -1:
        Then open the csv file, loop through each row in the csv.reader, 
        For each row (skipping the first row), construct a dictionary for each row and 
        append it to the list that you will return; 
    
    Else: 
        Then open the csv file, loop through each row in teh csv.reader, 
        Find the row that matches i, and construct a dictionary for that row, and return it in 
        a list format. 

Outputs: 
    reutrn a list of dictionaries; 
    Also return False, if there are any errors that occur. 
'''
def read(fileName, i=-1):
    try:
        lis=list()
        with open(fileName,'r') as f:
            reader=csv.reader(f);
            first=True;
            for row in reader:
                if(i==0):
                    #assemble dict
                    return read_helper(fileName, row)
                if(first):
                    first=False;
                    continue;
                #ASSEMBLE DICTIONARY
                list.append(read_helper(fileName, row))
            return lis
    except Exception as e:
        print("line 96");
        print(e)
        return False;

#helper function, read_helper()
'''
Input: Takes in a list generated by csv, called a
    FileName is a string indicating the csv file 
    a is a list generated by the csv read() function
Logic: 
    Call upon read(fileName,0) which will give you the keys of the dictionary. 
    Then the values of the dictionary to be returned are the elements in the list 
    Helpful hint: the keys and values are teh same length so this can be done in one loop 
Output: 
    the dictionary created 
Why? 
    This will help the read() function, create a list of dictionaries 
'''
def read_helper(fileName,a):
    d=dict()
    try:
        keys=read(fileName,0);
        for i in range(len(a)):
            k,v=keys[i],a[i]
            d[k]=v;
    except Exception as e:
        print("line 122")
        print(e)
        return False
    return d; 



